function [C_ant,C_post] = FindWheelEllipses(im_orig)
    %Initialization
    C_ant=[];
    C_post=[];
    %im_orig is the grayscale image.
 
    %Find edge
    bw = edge(im_orig, 'canny');
    bw=imdilate(bw,ones(5));
    bw=imerode(bw,ones(3));

    %With regionpros (with these properties), I find all the possibile 
    %regions with a ellipse shape.   
    s = regionprops(bw,{...
        'Centroid',...
        'MajorAxisLength',...
        'MinorAxisLength',...
        'Orientation'});

    for k = 1:length(s)
        a = s(k).MajorAxisLength/2;
        b = s(k).MinorAxisLength/2;
        Xc = s(k).Centroid(1);
        Yc = s(k).Centroid(2);
        phi = deg2rad(-s(k).Orientation);
        ruota_anteriore = (a>100 & b>45 & a<300 & b<300 & abs(a-b)>0.6*max(a,b));
        ruota_posteriore = (a>100 & b>100 & a<300 & b<300);
        a=a;
        b=b;
        Xc=Xc;
        Yc=Yc;
        if(ruota_anteriore)
            c0 = ((cos(phi))^2)/(a^2)... 
                + ((sin(phi))^2)/(b^2);
            
            c1 = ((sin(phi))^2)/(a^2)... 
                + ((cos(phi))^2)/(b^2);
            
            c2 = (sin(2*phi))/(a^2) ...
                - (sin(2*phi))/(b^2);
            
            c3 = -(2*Xc*(cos(phi))^2)/(a^2) ...
                - (Yc*sin(2*phi))/(a^2) ...
                - (2*Xc*(sin(phi))^2)/(b^2) ...
                + (Yc*sin(2*phi))/(b^2);
            
            c4 = - (Xc*sin(2*phi))/(a^2) ...
                - (2*Yc*(sin(phi))^2)/(a^2) ...
                + (Xc*sin(2*phi))/(b^2) ...
                - (2*Yc*(cos(phi))^2)/(b^2);
            
            c5 = ((Xc^2)*(cos(phi))^2)/(a^2) ...
                + (Xc*Yc*sin(2*phi))/(a^2) ...
                + ((Yc^2)*(sin(phi))^2)/(a^2) ...
                +((Xc^2)*(sin(phi))^2)/(b^2) ...
                - (Xc*Yc*sin(2*phi))/(b^2) ...
                + ((Yc^2)*(cos(phi))^2)/(b^2) ...
                - 1;
            C_ant=[c0 c2/2 c3/2; c2/2 c1 c4/2; c3/2 c4/2 c5];
            C_ant=C_ant/C_ant(3,3);
        end

        if(ruota_posteriore)
            
            c0 = ((cos(phi))^2)/(a^2)... 
                + ((sin(phi))^2)/(b^2);
            
            c1 = ((sin(phi))^2)/(a^2)... 
                + ((cos(phi))^2)/(b^2);
            
            c2 = (sin(2*phi))/(a^2) ...
                - (sin(2*phi))/(b^2);
            
            c3 = -(2*Xc*(cos(phi))^2)/(a^2) ...
                - (Yc*sin(2*phi))/(a^2) ...
                - (2*Xc*(sin(phi))^2)/(b^2) ...
                + (Yc*sin(2*phi))/(b^2);
            
            c4 = - (Xc*sin(2*phi))/(a^2) ...
                - (2*Yc*(sin(phi))^2)/(a^2) ...
                + (Xc*sin(2*phi))/(b^2) ...
                - (2*Yc*(cos(phi))^2)/(b^2);
            
            c5 = ((Xc^2)*(cos(phi))^2)/(a^2) ...
                + (Xc*Yc*sin(2*phi))/(a^2) ...
                + ((Yc^2)*(sin(phi))^2)/(a^2) ...
                +((Xc^2)*(sin(phi))^2)/(b^2) ...
                - (Xc*Yc*sin(2*phi))/(b^2) ...
                + ((Yc^2)*(cos(phi))^2)/(b^2) ...
                - 1;
            
            C_post=[c0 c2/2 c3/2; c2/2 c1 c4/2; c3/2 c4/2 c5];
            C_post=C_post/C_post(3,3);
        end

    end

end

